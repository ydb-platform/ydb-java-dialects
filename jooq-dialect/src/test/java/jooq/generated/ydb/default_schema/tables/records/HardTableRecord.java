/*
 * This file is generated by jOOQ.
 */
package jooq.generated.ydb.default_schema.tables.records;


import java.util.UUID;

import jooq.generated.ydb.default_schema.tables.HardTable;

import org.jooq.JSON;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import tech.ydb.jooq.value.YSON;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class HardTableRecord extends UpdatableRecordImpl<HardTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>DEFAULT_SCHEMA.hard_table.id</code>.
     */
    public void setId(byte[] value) {
        set(0, value);
    }

    /**
     * Getter for <code>DEFAULT_SCHEMA.hard_table.id</code>.
     */
    public byte[] getId() {
        return (byte[]) get(0);
    }

    /**
     * Setter for <code>DEFAULT_SCHEMA.hard_table.first</code>.
     */
    public void setFirst(JSON value) {
        set(1, value);
    }

    /**
     * Getter for <code>DEFAULT_SCHEMA.hard_table.first</code>.
     */
    public JSON getFirst() {
        return (JSON) get(1);
    }

    /**
     * Setter for <code>DEFAULT_SCHEMA.hard_table.second</code>.
     */
    public void setSecond(JSONB value) {
        set(2, value);
    }

    /**
     * Getter for <code>DEFAULT_SCHEMA.hard_table.second</code>.
     */
    public JSONB getSecond() {
        return (JSONB) get(2);
    }

    /**
     * Setter for <code>DEFAULT_SCHEMA.hard_table.third</code>.
     */
    public void setThird(YSON value) {
        set(3, value);
    }

    /**
     * Getter for <code>DEFAULT_SCHEMA.hard_table.third</code>.
     */
    public YSON getThird() {
        return (YSON) get(3);
    }

    /**
     * Setter for <code>DEFAULT_SCHEMA.hard_table.uuid</code>.
     */
    public void setUuid(UUID value) {
        set(4, value);
    }

    /**
     * Getter for <code>DEFAULT_SCHEMA.hard_table.uuid</code>.
     */
    public UUID getUuid() {
        return (UUID) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<byte[]> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HardTableRecord
     */
    public HardTableRecord() {
        super(HardTable.HARD_TABLE);
    }

    /**
     * Create a detached, initialised HardTableRecord
     */
    public HardTableRecord(byte[] id, JSON first, JSONB second, YSON third, UUID uuid) {
        super(HardTable.HARD_TABLE);

        setId(id);
        setFirst(first);
        setSecond(second);
        setThird(third);
        setUuid(uuid);
        resetChangedOnNotNull();
    }
}
