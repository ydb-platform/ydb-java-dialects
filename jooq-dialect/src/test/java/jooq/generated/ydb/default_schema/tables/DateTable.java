/*
 * This file is generated by jOOQ.
 */
package jooq.generated.ydb.default_schema.tables;


import java.math.BigDecimal;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collection;

import jooq.generated.ydb.default_schema.DefaultSchema;
import jooq.generated.ydb.default_schema.Keys;
import jooq.generated.ydb.default_schema.tables.records.DateTableRecord;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import tech.ydb.jooq.binding.Date32Binding;
import tech.ydb.jooq.binding.DateBinding;
import tech.ydb.jooq.binding.Datetime64Binding;
import tech.ydb.jooq.binding.DatetimeBinding;
import tech.ydb.jooq.binding.Interval64Binding;
import tech.ydb.jooq.binding.IntervalBinding;
import tech.ydb.jooq.binding.Timestamp64Binding;
import tech.ydb.jooq.binding.TimestampBinding;
import tech.ydb.jooq.binding.Uint64Binding;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class DateTable extends TableImpl<DateTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEFAULT_SCHEMA.date_table</code>
     */
    public static final DateTable DATE_TABLE = new DateTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DateTableRecord> getRecordType() {
        return DateTableRecord.class;
    }

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.id</code>.
     */
    public final TableField<DateTableRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED, this, "", new Uint64Binding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.int_col</code>.
     */
    public final TableField<DateTableRecord, Integer> INT_COL = createField(DSL.name("int_col"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.percent</code>.
     */
    public final TableField<DateTableRecord, Double> PERCENT = createField(DSL.name("percent"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.big</code>.
     */
    public final TableField<DateTableRecord, BigDecimal> BIG = createField(DSL.name("big"), SQLDataType.NUMERIC(22, 9), this, "");

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.date</code>.
     */
    public final TableField<DateTableRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE, this, "", new DateBinding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.datetime</code>.
     */
    public final TableField<DateTableRecord, LocalDateTime> DATETIME = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(19), this, "", new DatetimeBinding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.timestamp</code>.
     */
    public final TableField<DateTableRecord, Instant> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(26), this, "", new TimestampBinding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.interval</code>.
     */
    public final TableField<DateTableRecord, Duration> INTERVAL = createField(DSL.name("interval"), SQLDataType.INTERVAL, this, "", new IntervalBinding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.date32</code>.
     */
    public final TableField<DateTableRecord, LocalDate> DATE32 = createField(DSL.name("date32"), SQLDataType.LOCALDATE, this, "", new Date32Binding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.datetime64</code>.
     */
    public final TableField<DateTableRecord, LocalDateTime> DATETIME64 = createField(DSL.name("datetime64"), SQLDataType.LOCALDATETIME(19), this, "", new Datetime64Binding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.timestamp64</code>.
     */
    public final TableField<DateTableRecord, Instant> TIMESTAMP64 = createField(DSL.name("timestamp64"), SQLDataType.INSTANT(26), this, "", new Timestamp64Binding());

    /**
     * The column <code>DEFAULT_SCHEMA.date_table.interval64</code>.
     */
    public final TableField<DateTableRecord, Duration> INTERVAL64 = createField(DSL.name("interval64"), SQLDataType.BIGINTUNSIGNED, this, "", new Interval64Binding());

    private DateTable(Name alias, Table<DateTableRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private DateTable(Name alias, Table<DateTableRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.date_table</code> table reference
     */
    public DateTable(String alias) {
        this(DSL.name(alias), DATE_TABLE);
    }

    /**
     * Create an aliased <code>DEFAULT_SCHEMA.date_table</code> table reference
     */
    public DateTable(Name alias) {
        this(alias, DATE_TABLE);
    }

    /**
     * Create a <code>DEFAULT_SCHEMA.date_table</code> table reference
     */
    public DateTable() {
        this(DSL.name("date_table"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DateTableRecord> getPrimaryKey() {
        return Keys.PK_DATE_TABLE;
    }

    @Override
    public DateTable as(String alias) {
        return new DateTable(DSL.name(alias), this);
    }

    @Override
    public DateTable as(Name alias) {
        return new DateTable(alias, this);
    }

    @Override
    public DateTable as(Table<?> alias) {
        return new DateTable(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public DateTable rename(String name) {
        return new DateTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DateTable rename(Name name) {
        return new DateTable(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public DateTable rename(Table<?> name) {
        return new DateTable(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DateTable where(Condition condition) {
        return new DateTable(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DateTable where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DateTable where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DateTable where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DateTable where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DateTable where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DateTable where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public DateTable where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DateTable whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public DateTable whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
